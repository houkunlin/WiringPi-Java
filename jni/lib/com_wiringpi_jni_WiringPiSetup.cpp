/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_wiringpi_jni_WiringPiSetup.h"
#include <wiringPi.h>

JavaVM *java_jvm;
jclass java_pin_callback_class;
jmethodID java_pin_callback_method;

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetup
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetup(JNIEnv *env, jclass clazz) {
    return wiringPiSetup();
}

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetupSys
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetupSys(JNIEnv *env, jclass clazz) {
    return wiringPiSetupSys();
}

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetupGpio
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetupGpio(JNIEnv *env, jclass clazz) {
    return wiringPiSetupGpio();
}

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetupPhys
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetupPhys(JNIEnv *env, jclass clazz) {
    return wiringPiSetupPhys();
}

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetupPiFace
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetupPiFace(JNIEnv *env, jclass clazz){
    return wiringPiSetupPiFace();
}

/*
 * Class:     com_wiringpi_jni_WiringPiSetup
 * Method:    wiringPiSetupPiFaceForGpioProg
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_wiringpi_jni_WiringPiSetup_wiringPiSetupPiFaceForGpioProg(JNIEnv *env, jclass clazz){
    return wiringPiSetupPiFaceForGpioProg();
}

/**
 * @link <a href="https://github.com/Pi4J/pi4j/blob/master/pi4j-native/src/main/native/com_pi4j_wiringpi_GpioInterrupt.c"> com_pi4j_wiringpi_GpioInterrupt.c </a>
 */
JNIEXPORT jint JNI_OnLoad(JavaVM *jvm, void *reserved) {
    printf("\n\nJNI OnLoad 事件，当前正在加载 WiringPi 库\n");

    JNIEnv *env;

    java_jvm = jvm;
    // cache the JavaVM pointer

    // ensure that the calling environment is a supported JNI version
    if ((*jvm).GetEnv((void **) &env, JNI_VERSION_1_2)) {
        // JNI version not supported
        printf("NATIVE (GpioInterrupt) ERROR; JNI version not supported.\n");
        return JNI_ERR;
    }

    // search the attached java environment for the 'GpioInterrupt' class
    java_pin_callback_class = (*env).FindClass("com/wiringpi/jni/WiringPiSetup");
    if (java_pin_callback_class == NULL) {
        // expected class not found
        printf("NATIVE (GpioInterrupt) ERROR; GpioInterrupt class not found.\n");
        return JNI_ERR;
    }

    // lookup and cache the static method ID for the 'pinStateChangeCallback' callback
    java_pin_callback_method = (*env).GetStaticMethodID(java_pin_callback_class, "callback", "(I)V");
    if (java_pin_callback_method == NULL) {
        // callback method could not be found in attached java class
        printf("NATIVE (GpioInterrupt) ERROR; Static method 'GpioInterrupt.pinStateChangeCallback()' could not be found.\n");
        return JNI_ERR;
    }

    // return JNI version; success
    printf("\nJNI OnLoad 事件，WiringPi 库加载完成\n\n\n");
    return JNI_VERSION_1_2;
}